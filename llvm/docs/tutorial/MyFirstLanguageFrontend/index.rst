==========================================
LLVMを使った初めての言語フロントエンドチュートリアル
==========================================

.. toctree::
   :hidden:

   LangImpl01
   LangImpl02
   LangImpl03
   LangImpl04
   LangImpl05
   LangImpl06
   LangImpl07
   LangImpl08
   LangImpl09
   LangImpl10

**要件:** このチュートリアルはC++の知識があることを前提としていますが、コンパイラの経験は必要ありません。

「LLVMを使った初めての言語フロントエンド」チュートリアルへようこそ。ここでは簡単な言語の実装を実行し、それがいかに楽しく簡単かを示します。このチュートリアルは素早く始められるようになっており、LLVMを使用してコードを生成する具体的な例を示します。

このチュートリアルでは、シンプルな「Kaleidoscope」言語を紹介し、複数の章にわたって反復的に構築し、時間をかけてどのように構築されるかを示します。これにより、言語設計とLLVM固有のアイデアの範囲をカバーし、その過程でコードを示して説明し、最初から圧倒的な量の詳細を減らします。
*このコードを使って作業する* ことを強く推奨します - コピーを作成してハックアップし、実験してください。

**警告**: コンパイル技術とLLVM固有の教育に焦点を当てるため、このチュートリアルはソフトウェア工学の原則におけるベストプラクティスを示して*いません*。たとえば、コードはグローバル変数を広範囲に使用し、`visitor <http://en.wikipedia.org/wiki/Visitor_pattern>`_ を使用しないなど...しかし、代わりに物事をシンプルに保ち、手元のトピックに焦点を当てています。

このチュートリアルは個々のトピックをカバーする章に構成されており、希望に応じて先に進むことができます: 

-  `第1章: Kaleidoscope言語とLexer <LangImpl01.html>`_ -
   どこを目指しているか、および構築したい基本機能を示します。
   lexerは言語用のparserを構築する最初の部分でもあり、理解しやすい単純なC++ lexerを使用します。
-  `第2章: ParserとASTの実装 <LangImpl02.html>`_ -
   lexerが配置されているので、解析技術と基本的なAST構築について話すことができます。このチュートリアルでは、再帰下降解析と演算子優先順位解析について説明します。
-  `第3章: LLVM IRへのコード生成 <LangImpl03.html>`_ - 
   ASTの準備ができたら、LLVM IRの生成がいかに簡単かを示し、プロジェクトにLLVMを組み込む簡単な方法を示します。
-  `第4章: JITとオプティマイザーサポートの追加 <LangImpl04.html>`_ -
   LLVMの素晴らしい点の1つはJITコンパイルのサポートであり、すぐにそれに飛び込んでJITサポートを追加するための3行のコードをお見せします。後の章では.oファイルを生成する方法を示します。
-  `第5章: 言語の拡張: 制御フロー <LangImpl05.html>`_ - 
   基本言語が動作したら、制御フロー操作 ('if'文と'for'ループ) でそれを拡張する方法を示します。これにSSA構築と制御フローについて話す機会を与えます。
-  `第6章: 言語の拡張: ユーザー定義演算子 <LangImpl06.html>`_ - 
   この章では、ユーザーが任意の単項および二項演算子を定義できるように言語を拡張します - 割り当て可能な優先順位で！これにより、"言語"の重要な部分をライブラリルーチンとして構築できます。
-  `第7章: 言語の拡張: 可変変数 <LangImpl07.html>`_ - 
   この章では、代入演算子とともにユーザー定義のローカル変数の追加について説明します。LLVMでSSA形式を構築するのがいかに簡単かを示します: LLVMはフロントエンドが使用するためにSSA形式を構築することを必要とし*ません*！
-  `第8章: オブジェクトファイルへのコンパイル <LangImpl08.html>`_ - 
   この章では、静的コンパイラーのようにLLVM IRを取得してオブジェクトファイルにコンパイルする方法を説明します。
-  `第9章: デバッグ情報 <LangImpl09.html>`_ - 
   実際の言語にはデバッガーのサポートが必要なので、Kaleidoscope関数でブレークポイントを設定し、引数変数を出力し、関数を呼び出すことを可能にするデバッグ情報を追加します！
-  `第10章: 結論とその他の要素 <LangImpl10.html>`_ - 
   この章では、言語を拡張する方法について議論し、ガベージコレクションサポート、例外、デバッグ、「スパゲッティスタック」のサポートなどの「特別なトピック」に関する情報への参照を含めて、シリーズをまとめます。

チュートリアルの終わりまでに、1000行弱の (コメントなし、空行なし) コード行を書くことになります。この少量のコードで、手書きのlexer、parser、ASTだけでなく、静的とJITの両方のコード生成サポートを含む、非自明な言語用の素晴らしい小さなコンパイラーを構築することができます！これの幅広さはLLVMの強みの素晴らしい証拠であり、言語デザイナーや高性能コード生成を必要とするその他の人々にとってLLVMがなぜそのような人気のターゲットなのかを示しています。
